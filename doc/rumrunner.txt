*rumrunner.txt* A better MRU list.

    ___                                             |    |    |             ~
   | _ \_  _ _ __  _ _ _  _ _ _  _ _  ___ _ _      )_)  )_)  )_)            ~
   |   / || | '  \| '_| || | ' \| ' \/ -_) '_|    )___))___))___)\          ~
   |_|_\\_,_|_|_|_|_|  \_,_|_||_|_||_\___|_|     )____)____)_____)\\        ~
                                               _____|____|____|____\\\__    ~
----------- -----------------------------------\                   /------- ~
     ^^ ^ ^^        ^^^^^      ^^  ^^^     ^^^^^ ^^^^^^^^^^^^^^^^^^^^^      ~
             ^ ^^^        ^  ^^ ^      ^^^^    ^^^^^         ^^^^^^         ~

 INTRODUCTION                                   *rumrunner*

 A publicly accessible MRU list with sensible navigation.

 CONTENTS                                       *rumrunner-contents*

  1.  Overview                                  |rumrunner-overview|
  2.  Requirements                              |rumrunner-requirements|
  3.  Installation                              |rumrunner-installation|
  4.  Usage                                     |rumrunner-usage|
      4.1 Navigation                            |rumrunner-navigation|
      4.2 Ignoring Files                        |rumrunner-ignore|
      4.3 Suspend and Resume                    |rumrunner-suspend|
  5.  Plugin Authors                            |rumrunner-authors|
      5.1 Adding Files                          |rumrunner-add|
      5.2 Removing Files                        |rumrunner-remove|
      5.3 Accessing the MRU List                |rumrunner-access|
  6.  Functions                                 |rumrunner-functions|
  7.  Commands                                  |rumrunner-commands|
  8.  Mappings                                  |rumrunner-mappings|
  9.  Options                                   |rumrunner-options|
  10. Issues                                    |rumrunner-issues|
  11. Contributing                              |rumrunner-contributing|
  12. License                                   |rumrunner-license|

OVERVIEW                                        *rumrunner-overview*

I have two problems with existing MRU (most recently used) implementations for
vim. First, they're isolated, so while you can install, say, mru.vim, other
plugins like BufExplorer can't use the list it maintains. Thus BufExplorer
implements its own MRU list. Which means multiple plugins you use are,
potentially, doing the same work to keep the same list. What we need is an MRU
plugin with a public-facing API for accessing and manipulating the most
recently used list, so that it only needs to be implemented and maintained
once and can be shared by all.

The second problem is that most MRU implementations don't provide a clean way
to move around the list. That's because, once you go to the _second_ most
recently used file, it _becomes_ the most recently used file, so repeating the
action over and over will only toggle you between the two most recently used
files instead of walking back through the entire list.

Vim-rumrunner attempts to solve both these problems: the first by providing
methods to access the list it maintains and the second by temporarily
suspending MRU recordization when navigating up and down the MRU tree.

REQUIREMENTS                                    *rumrunner-requirements*

This plugin uses timers, which means it requires at least vim 8.0. It also
uses lambdas, so make sure `:echo has('lambda')` is 1.

INSTALLATION                                    *rumrunner-installation*

  1. Manual
  
     Clone this repository and copy the files in plugin/, autoload/, and doc/
     to their respective directories in your vimfiles, or copy the text from
     the github repository into new files in those directories. Make sure to
     run `:helptag`.

  2. Plug <https://github.com/junegunn/vim-plug>

     Add the following to your vimrc, or something sourced therein: >

     Plug 'tandrewnichols/vim-rumrunner'
<
     Then install via `:PlugInstall`

  3. Vundle <https://github.com/gmarik/Vundle.vim>

     Add the following to your vimrc, or something sourced therein: >

     Plugin 'tandrewnichols/vim-rumrunner'
<
     Then install via `:BundleInstall`

  4. NeoBundle <https://github.com/Shougo/neobundle.vim>

     Add the following to your vimrc, or something sourced therein: >

     NeoBundle 'tandrewnichols/vim-rumrunner'
<
     Then install via `:BundleInstall`

  5. Pathogen <https://github.com/tpope/vim-pathogen> >

     cd ~/.vim/bundle
     git clone https://github.com/tandrewnichols/vim-rumrunner.git
<
     Then run `:Helptags`
  
USAGE                                           *rumrunner-usage*

Navigation                                      *rumrunner-naviation*

Rumrunner provides two functions to navigate the MRU list, as well as commands
and mappings to those functions.

 `rum#prev()`   Move down the most recently used list (to less recently used
              files). This is mapped by default to `[r` (for "rum" or
              "recent") and available via the `:RumPrev` command.

 `rum#next()`   Move up the most recently used list (to more recently used
              files). This is mapped by default to `]r` and available via the
              `:RumNext` command.

Both of these commands and mappings take counts to jump more than one file at
a time and both call `rum#suspend()`, which makes Rumrunner stop
changing the MRU list, even as files are loaded. They then call
`rum#resume()` in a timer (with a default timeout of 2 seconds).
This timer is debounced so that, if you continue to navigate the tree, the
timeout is reset, which means that you can navigate down the MRU list 3 files
by typing `[r` 3 times (unlike other MRU implementations in which you would
just bounce between the two newest files). I like a 2 second timeout because
it gives me a moment to look at the file to see if it's the one I want and
still move on if necessary before rum resumes, but you can configure that
value via g:rumrunner_resume_timeout (see |rumrunner_resume_timeout|).

Example:

You have 5 files in your MRU list: >

  > a.txt
    b.txt
    c.txt
    d.txt
    e.txt

where `>` is your active buffer. You hit `[r` to move from `a.txt` to `b.txt`.
Your MRU list now looks like this: >

    a.txt
  > b.txt
    c.txt
    d.txt
    e.txt

Notice how `b.txt` has not yet been moved to the most recently used position.
That's because MRU recordization is temporarily suspended. If you wait 2
seconds without doing more jumping, your list will look like this: >

  > b.txt
    a.txt
    c.txt
    d.txt
    e.txt

But you can also continue jumping backward (or forward). Let's say you jump
backward again. Your MRU list now looks like this: >

    a.txt
    b.txt
  > c.txt
    d.txt
    e.txt

Press `[r` again and it looks like this: >

    a.txt
    b.txt
    c.txt
  > d.txt
    e.txt

But maybe that was too far and you did in fact want to edit `c.txt`. No
problem. The MRU list hasn't synced yet, so just jump forward again with `]r`.
Now you're back to: >

    a.txt
    b.txt
  > c.txt
    d.txt
    e.txt

Now after you wait 2 seconds, your list looks like this: >

  > c.txt
    a.txt
    b.txt
    d.txt
    e.txt

Notice that _only_ the one file you're editing changed places. The other files
didn't move because you didn't actually "use" them (they are not "more
recently used").

One additional navigation note: there are times when you might want to look
through a file for reference without changing the MRU list and the default
timeout isn't long enough to glean what you're after. There are two additional
mappings to resume and suspend rumrunner manually, which can be used in
conjunction with the above mappings:

  `[R`   Suspend rumrunner. This will deactivate any existing timers, so that
       if you browse to a file via `[r` and `]r` and need a bit more time
       before rumrunner resumes, you can suspend it permanently, and then
       reenable it later yourself.

  `]R`   Resume rumrunner. Don't forget to run this if you use `[R` to disable
       rumrunner.

Ignoring Files                                  *rumrunner-ignore*

It's possible that you won't ever want particular files to be in the most
recently used list. You can ignore files by calling `rum#ignore()` with either
a string pattern or a |funcref|/|lambda|. If you pass a function, it will be
called with a single argument, the name of the file currently being added to
the MRU list. Return 1 to indicate to Rumrunner that the file should NOT be
added to the list (1 meaning, "Yes, ignore this file"). By default,
directories, unlisted buffers, help entries, and diffs are ignored, although
this is configurable (see |rumrunner-options|).

Suspend and Resume                              *rumrunner-suspend*

If you're doing something that might create an unwanted entry in the MRU list,
you can, yourself, suspend Rumrunner by calling `rum#suspend()`, but note that
you will need to later call `rum#resume()` to reenable Rumrunner, otherwise,
files will never be added to the MRU list. Note also that `rum#resume()`
checks whether the current buffer is first in the MRU list and puts it there
if it's not, which means you shouldn't resume until you are in a buffer that
you want to be included in the MRU list.

PLUGIN AUTHORS                                  *rumrunner-authors*

If you're just a general user, the above is probably more than sufficient to
make the most of Rumrunner. If you're writing a plugin that could benefit from
an MRU list and you want to use Rumrunner, here's some other stuff you might
want to know.

Adding  Files                                   *rumrunner-add*

Seems unlikely that you'd need to do this but if you do, just call `rum#add()`
with the buffer number and buffer name.

Removing Files                                  *rumrunner-remove*

Buffers are automically removed from the MRU list on |BufWipeout| and
|BufDelete|, but it's possible you might want to remove a file from the MRU
list yourself. Just call `rum#remove()` with the buffer number and buffer
name.

Accessing the MRU List                          *rumrunner-access*

The main reason you might include Rumrunner as a dependency is to access it's
MRU list (for whatever sordid purpose you might have). Just call `rum#get()`
and a list of dictionariies will be returned. Each dictionary has two
properties:

  - num - the buffer number
  - name - the buffer name

Note that the buffer name is in the form that |expand|("|<afile>|") returns,
which is usually relative to the current working directory.

FUNCTIONS                                       *rumrunner-functions*

                                                *rumrunner-rum#add*
rum#add(num)        Add a new entry to the MRU list.

                                                *rumrunner-rum#remove*
rum#remove(num)     Remove an entry from the MRU list.

                                                *rumrunner-rum#normalize*
rum#normalize(num)  Format an entry for addition to (or removal from)
                          the MRU list.

                                                *rumrunner-rum#suspend*
rum#suspend()             Temporarily turn off MRU recordization.

                                                *rumrunner-rum#resume*
rum#resume()              Re-enable MRU recordization.

                                                *rumrunner-rum#log*
rum#log()                 Report the current state of rumrunner.

                                                *rumrunner-rum#get*
rum#get()                 Get the current MRU list.

                                                *rumrunner-rum#ignore*
rum#ignore(pattern)       Add a pattern or function to the blacklist. The
                          blacklist is used to determine whether a file should
                          be added to the MRU list.

                                                *rumrunner-rum#isIgnored*
rum#isIgnored(file)    Called internally to determine whether a file should be
                       added to the list. This function iterates over the
                       blacklist patterns and function and returns 1 for files
                       being ignored and 0 for files to include.

                                                *rumrunner-rum#prev*
rum#prev(count)        Move `<count>` entries backward in the MRU list (to less
                       recent files).

                                                *rumrunner-rum#next*
rum#next(count)        Move `<count>` entries forward in the MRU list (to more
                       recent files).

                                                *rumrunner-rum#move*
rum#move(count)        Move `<count>` entries in the MRU list. If `<count>` is
                       negative, it moves forward (which sounds
                       counter-intuitive until you realize that it's adding
                       `<count>` to the current index, which for a negative
                       number means moving toward 0, or _the first_ entry). A
                       positive number moves backward.

                                                *rumrunner-rum#checkTimer*
rum#checkTimer()       Deactivate the resume timeout if it is running

COMMANDS                                        *rumrunner-commands*

                                                *rumrunner-rumprev*
<count>RumPrev         Move <count> entries backward in the MRU list (to less
                       recent files).

                                                *rumrunner-rumnext*
<count>RumNext         Move <count> entries forward in the MRU list (to more
                       recent files).

                                                *rumrunner-rumsuspend*
RumSuspend             Suspend Rumrunner.

                                                *rumrunner-rumresume*
RumResume              Resume Rumrunner.

MAPPINGS                                        *rumrunner-mappings*

                                                *rumrunner-[r*
<count>[r              Move <count> entries backward in the MRU list (to less
                       recent files).

                                                *rumrunner-]r*
<count>]r              Move <count> entries forward in the MRU list (to more
                       recent files).

                                                *rumrunner-[R*
[R                     Suspend Rumrunner.

                                                *rumrunner-]R*
]R                     Resume Rumrunner.

OPTIONS                                         *rumrunner-options*

                                                *rumrunner_resume_timeout*
g:rumrunner_resume_timeout   Timer duration in milliseconds when navigating
                             the MRU list before resuming recordization.
                             Default: 2000.

                                                *rumrunner_disabled*
g:rumrunner_disabled         Internal flag used by `rum#suspend()` and
                             `rum#resume()` to determine whether to add files
                             to the MRU list. The only reason you'd maybe want
                             to set this to 1 is if you wanted Rumrunner to be
                             disabled when vim starts up and then later
                             enabled.
                             Default: 0.

                                                *rumrunner_ignore_dirs*
g:rumrunner_ignore_dirs      Don't add directories to the MRU list.
                             Personally, I don't think of directories as
                             things that are "used," as I'm typically just
                             passing through them to find a particular file,
                             thus they are not added to the MRU list by
                             default.
                             Default: 1.

                                                *rumrunner_ignore_help*
g:rumrunner_ignore_help      Don't add help entries to the MRU list.
                             Default: 1.

                                                *rumrunner_ignore_unlisted*
g:rumrunner_ignore_unlisted  Don't add unlisted buffers to the MRU list. These
                             are almost always temp buffers and wrappers
                             provided by other plugins that you don't want to
                             cycle through.
                             Default: 1.

                                                *rumrunner_ignore_diffs*
g:rumrunner_ignore_diffs     Don't add diffs, including fugitive buffers, to
                             the MRU list.
                             Default: 1.

                                                *rumrunner_blacklist*
g:rumrunner_blacklist        The actual blacklist of patterns and functions
                             used to determine whether a file is ignored. This
                             is exposed publicly because calling `rum#ignore`
                             has to be loaded so you'd have to call it in an
                             |after|/plugins script. If you don't want to mess
                             with that, you can just set the initial list to
                             something else.
                             Default: [].

                                                *rumrunner_log*
g:rumrunner_log              Don't add diffs, including fugitive buffers, to
                             the MRU list.
                             Default: 1.

                                                *rumrunner_list*
g:rumrunner_list             The actual MRU list returned by `rum#get()`.

ISSUES                                          *rumrunner-issues*

If you experience issues using vim-rumrunner, please report them at
<https://github.com/tandrewnichols/vim-rumrunner/issues>.

CONTRIBUTING                                    *rumrunner-contributing*

I always try to be open to suggestions, but I do still have opinions about what
this should and should not be so . . . it never hurts to ask before investing a
lot of time on a patch.

VERSION                                         *rumrunner-version*

Version 1.0.0

LICENSE                                         *rumrunner-license*

The MIT License (MIT)

Copyright (c) 2018 Andrew Nichols

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

vim:tw=78:ts=2:ft=help:norl:
